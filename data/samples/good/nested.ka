
-- This is just to make sure that the hierarchy isn't too strict...

data Nat : * => { zero : Nat | suc : Nat -> Nat }

data List : [A : *] -> * =>
    { nil  : List A
    | cons : A -> List A -> List A
    }

record Sigma : [A : *] [B : A -> *] -> * =>
    si {fst : A, snd : B fst}

data Bool : * => { true : Bool | false : Bool }

ite [A : *] [b : Bool] : A -> A -> A => (Bool-Elim b (\_ => A))

And [A B : *] : * => (Sigma A (\_ => B))

foo1 : And * * => (si Nat (List Nat))
foo2 : Sigma Bool (\b => ite * b Nat Bool) => (si true zero)
foo4 : And (And * *) (Sigma Bool (\b => ite * b Nat Bool)) => (si foo1 foo2)
foo5 : List * => (cons Nat (cons Bool (cons (And Nat Bool) nil)))
foo6 : List (List *) => (cons nil (cons foo5 nil))