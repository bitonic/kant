
data Nat : * => { zero : Nat | suc : Nat -> Nat }

one : Nat => (suc zero)
two : Nat => (suc one)
three : Nat => (suc two)

plus [x : Nat] : Nat -> Nat => (
   Nat-Elim
       x                        -- Thing to eliminate
       (\_ => Nat -> Nat)       -- Return type
       (\y => y)                -- Base case, if x is zero
       (\_ f y => suc (f y))    -- Inductive step
)

times [x : Nat] : Nat -> Nat => (
    Nat-Elim x (\_ => Nat -> Nat)
        (\_ => zero)
        (\_ f y => plus y (f y))
)

fac [x : Nat] : Nat => (
    Nat-Elim x (\_ => Nat) one (\n rec => times (suc n) rec)
)

data List : [A : *] -> * =>
    { nil  : List A
    | cons : A -> List A -> List A
    }

app [A : *] [xs : List A] : List A -> List A => (
    List-Elim xs
        (\_ => List A -> List A)
        (\ys => ys)
        (\x _ f ys => cons x (f ys))
)

map [A B : *] [f : A -> B] [xs : List A] : List B => (
    List-Elim xs
        (\_ => (A -> B) -> List B)
        (\_ => nil)
        (\x xs rec f => cons (f x) (rec f))
        f
)

length [A : *] [xs : List A] : Nat => (
    List-Elim xs (\_ => Nat) zero (\_ _ n => suc n)
)

upto3  : List Nat => (cons one (cons two (cons three nil)))
-- upto4  : List Nat => (cons one (map Nat Nat upto3 (plus one)))
-- upto4' : List Nat => (map Nat upto3 Nat suc)

-- record Sigma : [A : *] [B : A -> *] -> * =>
--     si {fst : A, snd : B fst}

-- pair [A B : *] [x : A] [y : B] : Sigma A (\_ => B) => (
--     si x y
-- )

-- id [A : *] [x : A] : A => x
-- const [A B : *] [x : A] [y : B] : A => x

-- data Bool : * => { true : Bool | false : Bool }

-- ite [P : Bool -> *] [b : Bool] : P true -> P false -> P b => (
--     Bool-Elim b P
-- )

-- ite' [A : *] : Bool -> A -> A -> A => (ite (\_ => A))

-- data Empty : * => { }

-- absurd [p : Empty] [A : *] : A => (
--     Empty-Elim p (\_ => A)
-- )

-- record Unit : * => tt { }

-- T [b : Bool] : * => (ite' * b Unit Empty)

-- -- ackerman | [m n : Nat] : Nat => (
-- --   case m return Nat
-- --     { zero   => suc n
-- --     | suc m' => case n return Nat
-- --                   { zero   => ackerman m' one
-- --                   | suc n' => ackerman m' (ackerman m n')
-- --                   }
-- --     }
-- -- )

-- isZero [n : Nat] : Bool => (
--   Nat-Elim n (\_ => Bool) true (\_ _ => false)
-- )

-- isSuc [n : Nat] : Bool => (
--   Nat-Elim n (\_ => Bool) false (\_ _ => true)
-- )

-- not [b : Bool] : Bool => (
--   ite' Bool b false true
-- )

-- pred [n : Nat] : T (isSuc n) -> Nat => (
--     Nat-Elim n (\m => T (isSuc m) -> Nat) (\p => absurd p Nat) (\m _ _ => m)
-- )
