
record And : [A B : *] -> * =>
  and { fst : A, snd : B }

data Or : [A B : *] -> * =>
    { inl : A -> Or A B
    | inr : B -> Or A B
    }

case [A B C : *] [x : Or A B] [f : A -> C] [g : B -> C] : C => (
    Or-Elim x
        (\_ => [C : *] -> (A -> C) -> (B -> C) -> C)
        (\y _ f _ => f y)
        (\y _ _ f => f y)
        C f g
)

data Empty : * => { }

absurd [p : Empty] [A : *] : A => (
    Empty-Elim p (\_ => A)
)

not [A : *] : * => (A -> Empty)

em-dn [em : [A : *] -> Or A (not A)] [A : *] [nnA : not (not A)] : A => (
    case A (not A) A (em A) (\a => a) (\nota => absurd (nnA nota) A)
)

dn-em [dn : [A : *] -> not (not A) -> A] [A : *] : Or A (not A) => (
    dn (Or A (not A)) (\x => x (inr (\y => x (inl y))))
)
